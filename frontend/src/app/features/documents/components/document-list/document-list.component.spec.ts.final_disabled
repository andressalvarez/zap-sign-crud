import { TestBed } from '@angular/core/testing';
import { Router } from '@angular/router';
import { ActivatedRoute } from '@angular/router';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialog } from '@angular/material/dialog';
import { of } from 'rxjs';

import { DocumentListComponent } from './document-list.component';
import { DocumentService } from '../../services/document.service';

describe('DocumentListComponent (Logic Only)', () => {
  let component: DocumentListComponent;
  let documentService: jasmine.SpyObj<DocumentService>;

  beforeEach(() => {
    const documentServiceSpy = jasmine.createSpyObj('DocumentService', ['getDocuments', 'getCompanies']);
    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);
    const snackBarSpy = jasmine.createSpyObj('MatSnackBar', ['open']);
    const dialogSpy = jasmine.createSpyObj('MatDialog', ['open']);

    TestBed.configureTestingModule({
      providers: [
        DocumentListComponent,
        { provide: DocumentService, useValue: documentServiceSpy },
        { provide: Router, useValue: routerSpy },
        { provide: ActivatedRoute, useValue: { queryParams: of({}) } },
        { provide: MatSnackBar, useValue: snackBarSpy },
        { provide: MatDialog, useValue: dialogSpy }
      ]
    });

    component = TestBed.inject(DocumentListComponent);
    documentService = TestBed.inject(DocumentService) as jasmine.SpyObj<DocumentService>;

    documentService.getDocuments.and.returnValue(of({ results: [], count: 0, next: null, previous: null }));
    documentService.getCompanies.and.returnValue(of({ results: [], count: 0, next: null, previous: null }));
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should have correct status color mapping', () => {
    expect(component.getStatusColor('completed')).toBe('primary');
    expect(component.getStatusColor('pending')).toBe('accent');
    expect(component.getStatusColor('cancelled')).toBe('warn');
  });

  it('should have correct status icon mapping', () => {
    expect(component.getStatusIcon('completed')).toBe('check_circle');
    expect(component.getStatusIcon('pending')).toBe('schedule');
    expect(component.getStatusIcon('cancelled')).toBe('cancel');
  });
});
