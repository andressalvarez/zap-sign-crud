import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';
import { RouterModule, Router } from '@angular/router';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialog } from '@angular/material/dialog';
import { Subject, takeUntil, catchError, of, forkJoin } from 'rxjs';

// Material Design Modules
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatStepperModule } from '@angular/material/stepper';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatChipsModule } from '@angular/material/chips';
import { MatProgressBarModule } from '@angular/material/progress-bar';

// Services and Models
import { DocumentService } from '../../services/document.service';
import { Company } from '../../../../core/models/document.interface';
import { CompanyQuickManagerComponent } from '../company-quick-manager/company-quick-manager.component';

@Component({
  selector: 'app-document-create',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterModule,
    MatCardModule,
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatButtonModule,
    MatIconModule,
    MatProgressSpinnerModule,
    MatStepperModule,
    MatCheckboxModule,
    MatDividerModule,
    MatExpansionModule,
    MatChipsModule,
    MatProgressBarModule
  ],
  templateUrl: './document-create.component.html',
  styleUrls: ['./document-create.component.scss']
})
export class DocumentCreateComponent implements OnInit, OnDestroy {
  private destroy$ = new Subject<void>();

  documentForm!: FormGroup;
  companies: Company[] = [];
  loading = false;

  constructor(
    private fb: FormBuilder,
    private documentService: DocumentService,
    private router: Router,
    private snackBar: MatSnackBar,
    private dialog: MatDialog
  ) {
    this.initializeForm();
  }

  ngOnInit(): void {
    this.loadCompanies().catch(error => console.error('Error loading companies on init:', error));
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private initializeForm(): void {
    this.documentForm = this.fb.group({
      name: ['', [Validators.required, Validators.minLength(3)]],
      pdf_url: ['', [
        Validators.required,
        Validators.pattern(/^https?:\/\/.+/)
      ]],
      created_by: ['', Validators.required],
      company_id: ['', Validators.required],
      signers: this.fb.array([this.createSignerForm()])
    });
  }

  private createSignerForm(): FormGroup {
    return this.fb.group({
      name: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]]
    });
  }

  get signersArray(): FormArray {
    return this.documentForm.get('signers') as FormArray;
  }

  addSigner(): void {
    this.signersArray.push(this.createSignerForm());
    this.snackBar.open('Firmante agregado', '', { duration: 2000 });
  }

  removeSigner(index: number): void {
    if (this.signersArray.length > 1) {
      this.signersArray.removeAt(index);
      this.snackBar.open('Firmante eliminado', '', { duration: 2000 });
    }
  }

  private loadCompanies(): Promise<void> {
    return new Promise((resolve, reject) => {
      this.documentService.getCompanies()
        .pipe(
          takeUntil(this.destroy$),
          catchError(error => {
            this.snackBar.open(
              `Error al cargar empresas: ${error.message}`,
              'Cerrar',
              { duration: 5000 }
            );
            reject(error);
            return of({ results: [] });
          })
        )
        .subscribe(response => {
          this.companies = response.results;

          // Preseleccionar la primera empresa si solo hay una
          if (this.companies.length === 1) {
            this.documentForm.patchValue({
              company_id: this.companies[0].id
            });
          }

          resolve();
        });
    });
  }

    onSubmit(): void {
    if (this.documentForm.valid) {
      this.createDocument();
    } else {
      this.markFormGroupTouched();
      this.snackBar.open(
        'Por favor completa todos los campos obligatorios correctamente',
        'Cerrar',
        { duration: 5000 }
      );
    }
  }

  private showDetailedError(title: string, message: string, status: number, technicalDetails: string, fullError: any): void {
    // Log completo para desarrolladores
    console.group('üö® ERROR DETALLADO PARA DESARROLLADORES');
    console.error('‚ùå T√≠tulo:', title);
    console.error('üìù Mensaje:', message);
    console.error('üî¢ Status:', status);
    console.error('üìÑ Detalles t√©cnicos:', technicalDetails);
    console.error('üîç Error completo:', fullError);
    console.error('‚è∞ Timestamp:', new Date().toISOString());
    console.error('üåê URL del error:', fullError?.url || 'N/A');
    console.error('üìä Headers:', fullError?.headers || 'N/A');
    console.groupEnd();

    // Crear mensaje detallado para el usuario
    let userMessage = `${title}\n\n${message}`;

    // Agregar informaci√≥n t√©cnica √∫til
    if (status) {
      userMessage += `\n\nüîß Informaci√≥n T√©cnica:`;
      userMessage += `\n‚Ä¢ C√≥digo de Error: HTTP ${status}`;

      if (fullError?.url) {
        userMessage += `\n‚Ä¢ Endpoint: ${fullError.url}`;
      }

      if (fullError?.statusText) {
        userMessage += `\n‚Ä¢ Estado: ${fullError.statusText}`;
      }
    }

    // Mostrar detalles del servidor si est√°n disponibles
    if (technicalDetails && technicalDetails !== '{}' && technicalDetails !== 'null') {
      try {
        const parsedDetails = JSON.parse(technicalDetails);
        userMessage += `\n\nüìã Detalles del Servidor:`;

        if (parsedDetails.detail) {
          userMessage += `\n‚Ä¢ ${parsedDetails.detail}`;
        }

        if (parsedDetails.non_field_errors) {
          userMessage += `\n‚Ä¢ Errores: ${parsedDetails.non_field_errors.join(', ')}`;
        }

        if (parsedDetails.pdf_url) {
          userMessage += `\n‚Ä¢ PDF URL: ${parsedDetails.pdf_url.join(', ')}`;
        }

        if (parsedDetails.signers) {
          userMessage += `\n‚Ä¢ Firmantes: ${JSON.stringify(parsedDetails.signers)}`;
        }
      } catch (e) {
        userMessage += `\n\nüìã Respuesta Servidor: ${technicalDetails}`;
      }
    }

    // Agregar timestamp para referencia
    userMessage += `\n\n‚è∞ Hora del Error: ${new Date().toLocaleString()}`;

    // Instrucciones para desarrolladores
    userMessage += `\n\nüë®‚Äçüíª Para Desarrolladores:`;
    userMessage += `\n‚Ä¢ Revisa la consola del navegador para detalles completos`;
    userMessage += `\n‚Ä¢ Usa "Copiar Error" para obtener informaci√≥n t√©cnica`;

    // Mostrar en snackbar con opci√≥n de copiar
    this.snackBar.open(
      userMessage,
      'Copiar Error',
      {
        duration: 20000, // 20 segundos para leer todo el error
        panelClass: ['error-snackbar'],
        horizontalPosition: 'center',
        verticalPosition: 'top'
      }
    ).onAction().subscribe(() => {
      // Crear texto completo para copiar
      const copyText = `
=== ERROR DETALLADO ZAPSIGN CRUD ===
T√≠tulo: ${title}
Mensaje: ${message}
Status: ${status}
URL: ${fullError?.url || 'N/A'}
StatusText: ${fullError?.statusText || 'N/A'}
Timestamp: ${new Date().toISOString()}

=== DETALLES T√âCNICOS ===
${technicalDetails}

=== ERROR COMPLETO ===
${JSON.stringify(fullError, null, 2)}
      `.trim();

      // Copiar al clipboard
      if (navigator.clipboard) {
        navigator.clipboard.writeText(copyText).then(() => {
          this.snackBar.open('‚úÖ Error copiado al portapapeles', 'OK', { duration: 3000 });
        }).catch(() => {
          console.log('üìã ERROR PARA COPIAR:', copyText);
          this.snackBar.open('‚ùå Error al copiar. Ver consola.', 'OK', { duration: 3000 });
        });
      } else {
        console.log('üìã ERROR PARA COPIAR:', copyText);
        this.snackBar.open('‚ùå Clipboard no disponible. Ver consola.', 'OK', { duration: 3000 });
      }
    });


  }

  private createDocument(): void {
    this.loading = true;

    const formData = this.documentForm.value;

    this.documentService.createDocument(formData)
      .pipe(
        takeUntil(this.destroy$),
        catchError(error => {
          this.loading = false;

          console.error('‚ùå Error completo en creaci√≥n de documento:', error);
          console.log('üîç DEBUG: error.error:', error.error);
          console.log('üîç DEBUG: error.error?.code:', error.error?.code);
          console.log('üîç DEBUG: error.error?.detail:', error.error?.detail);

          let errorMessage = 'Error al crear el documento';
          let errorType = 'Error Desconocido';
          let technicalDetails = '';

          // Capturar detalles t√©cnicos para desarrolladores
          if (error.error) {
            technicalDetails = JSON.stringify(error.error, null, 2);
          } else if (error.message) {
            technicalDetails = error.message;
          }

          // Log detallado para debug
          console.error('üìä Detalles del error:', {
            status: error.status,
            statusText: error.statusText,
            url: error.url,
            error: error.error,
            message: error.message,
            headers: error.headers
          });

          // Determinar tipo de error con mucho m√°s detalle
          // PRIMERO: Revisar si es un error espec√≠fico de ZapSign API
          // Buscar en error.error (HttpErrorResponse) O en error.message (JavaScript Error)
          const zapSignDetail = error.error?.detail || error.message || '';
          console.log('üîç Detectando error ZapSign (combinado):', zapSignDetail);

          if (error.error?.code === 'ZAPSIGN_API_ERROR' ||
              zapSignDetail.includes('Failed to create document') ||
              zapSignDetail.includes('API token not found') ||
              zapSignDetail.includes('Token da API n√£o encontrado') ||
              zapSignDetail.includes('Erro para baixar o seu arquivo')) {

            // Manejar errores espec√≠ficos de ZapSign
            errorType = 'Error de ZapSign API';

            if (zapSignDetail.includes('404: Not Found') || zapSignDetail.includes('Erro para baixar o seu arquivo')) {
              errorType = 'üîó URL del PDF Inaccesible';
              errorMessage = 'La URL del PDF que proporcionaste no es accesible desde internet. Verifica que:\n\n‚Ä¢ La URL sea correcta y est√© escrita sin errores\n‚Ä¢ El archivo PDF exista en esa ubicaci√≥n\n‚Ä¢ El servidor donde est√° alojado el PDF est√© funcionando\n‚Ä¢ La URL sea p√∫blica (no requiera autenticaci√≥n)\n\nEjemplo de URL v√°lida: https://www.ejemplo.com/documento.pdf';
              this.markFieldAsInvalid('pdf_url', 'URL del PDF no accesible desde internet');
            } else if (zapSignDetail.includes('403') ||
                       zapSignDetail.includes('API token not found') ||
                       zapSignDetail.includes('Token da API n√£o encontrado')) {
              errorType = 'üîë Token de API Inv√°lido';
              errorMessage = 'El token de ZapSign configurado para esta empresa no es v√°lido. Para solucionarlo:\n\n‚Ä¢ Ve a la configuraci√≥n de la empresa\n‚Ä¢ Verifica que el token de API sea correcto\n‚Ä¢ Obt√©n un nuevo token desde tu cuenta de ZapSign\n‚Ä¢ Aseg√∫rate de copiar el token completo sin espacios\n\n¬øNecesitas ayuda? Consulta: https://docs.zapsign.com.br';
              this.markCompanyFieldAsInvalid('Token de ZapSign inv√°lido para esta empresa');
            } else {
              errorMessage = 'Error en la integraci√≥n con ZapSign. Revisa la configuraci√≥n.';
            }
          } else if (error.status === 502) {
            errorType = 'Error del Servidor (502 Bad Gateway)';
            if (error.error?.detail?.includes('Failed to create document') && error.error?.detail?.includes('Connection refused')) {
              errorMessage = 'ZapSign API no pudo descargar el PDF. Verifica que la URL sea p√∫blica y accesible desde internet.';
            } else {
              errorMessage = 'El servidor no puede conectarse con ZapSign API. Revisa la URL del PDF y que sea accesible.';
            }
          } else if (error.status === 400) {
            errorType = 'Error de Validaci√≥n (400)';
            // Extraer mensaje espec√≠fico del backend si existe
            if (error.error?.detail) {
              errorMessage = `Datos inv√°lidos: ${error.error.detail}`;
            } else if (error.error?.non_field_errors) {
              errorMessage = `Error de validaci√≥n: ${error.error.non_field_errors.join(', ')}`;
            } else if (error.error?.pdf_url) {
              errorMessage = `URL del PDF inv√°lida: ${error.error.pdf_url.join(', ')}`;
            } else if (error.error?.signers) {
              errorMessage = `Error en firmantes: ${JSON.stringify(error.error.signers)}`;
            } else {
              errorMessage = 'Datos inv√°lidos. Verifica que todos los campos est√©n correctos.';
            }
          } else if (error.status === 401) {
            errorType = 'Error de Autenticaci√≥n (401)';
            errorMessage = 'Token de API inv√°lido. Verifica que el token de ZapSign de la empresa sea correcto.';
          } else if (error.status === 403) {
            errorType = 'Error de Permisos (403)';
            errorMessage = 'Sin permisos para crear documentos. Verifica el token de API.';
          } else if (error.status === 422) {
            errorType = 'Error de ZapSign API (422)';
            errorMessage = 'ZapSign rechaz√≥ la solicitud. Verifica que la URL del PDF sea accesible y el formato sea correcto.';
          } else if (error.status === 500) {
            errorType = 'Error Interno del Servidor (500)';
            if (error.error?.detail) {
              errorMessage = `Error del servidor: ${error.error.detail}`;
            } else {
              errorMessage = 'Error interno del servidor. Intenta nuevamente.';
            }
          } else if (error.status === 0) {
            errorType = 'Error de Conexi√≥n';
            errorMessage = 'No se puede conectar al servidor. Verifica tu conexi√≥n a internet y que el backend est√© ejecut√°ndose.';
          } else if (error.error?.detail) {
            errorType = `Error HTTP ${error.status}`;
            errorMessage = error.error.detail;
          }

          // Mostrar error detallado (simplificado para errores conocidos)
          const isKnownError = errorType.includes('üîó') || errorType.includes('üîë');
          if (isKnownError) {
            // Para errores conocidos, mostrar solo el mensaje amigable
            this.showSimpleError(errorType, errorMessage);
          } else {
            // Para errores desconocidos, mostrar todos los detalles
            this.showDetailedError(errorType, errorMessage, error.status || 0, technicalDetails, error);
          }
          return of(null);
        })
      )
      .subscribe(response => {
        this.loading = false;

        if (response) {
          this.snackBar.open(
            `Documento "${response.name}" creado exitosamente`,
            'Ver',
            { duration: 5000 }
          ).onAction().subscribe(() => {
            this.router.navigate(['/documents', response.id]);
          });

          // Redirigir despu√©s de un momento
          setTimeout(() => {
            this.router.navigate(['/documents']);
          }, 3000);
        }
      });
  }

  saveDraft(): void {
    const name = this.documentForm.get('name')?.value;
    if (!name) {
      this.snackBar.open('Ingresa al menos el nombre del documento', 'Cerrar', { duration: 3000 });
      return;
    }

    // Guardar en localStorage como borrador
    const draftData = {
      ...this.documentForm.value,
      savedAt: new Date().toISOString()
    };

    localStorage.setItem('document-draft', JSON.stringify(draftData));
    this.snackBar.open('Borrador guardado', 'Cerrar', { duration: 3000 });
  }

  private loadDraft(): void {
    const draft = localStorage.getItem('document-draft');
    if (draft) {
      try {
        const draftData = JSON.parse(draft);

        // Configurar el FormArray de firmantes
        while (this.signersArray.length < draftData.signers.length) {
          this.addSigner();
        }

        this.documentForm.patchValue(draftData);

        this.snackBar.open('Borrador cargado', 'Eliminar borrador', { duration: 5000 })
          .onAction().subscribe(() => {
            localStorage.removeItem('document-draft');
          });
      } catch (error) {
        localStorage.removeItem('document-draft');
      }
    }
  }

  private markFormGroupTouched(): void {
    Object.keys(this.documentForm.controls).forEach(key => {
      const control = this.documentForm.get(key);
      control?.markAsTouched();

      if (control instanceof FormArray) {
        control.controls.forEach(groupControl => {
          if (groupControl instanceof FormGroup) {
            Object.keys(groupControl.controls).forEach(nestedKey => {
              groupControl.get(nestedKey)?.markAsTouched();
            });
          }
        });
      }
    });
  }

  // Validaciones personalizadas
  isFieldInvalid(fieldName: string): boolean {
    const field = this.documentForm.get(fieldName);
    return !!(field && field.invalid && (field.dirty || field.touched));
  }

  getFieldError(fieldName: string): string {
    const field = this.documentForm.get(fieldName);
    if (field && field.errors) {
      // Errores personalizados de la API tienen prioridad
      if (field.errors['customError']) return field.errors['customError'];

      // Errores de validaci√≥n est√°ndar
      if (field.errors['required']) return 'Este campo es obligatorio';
      if (field.errors['email']) return 'Ingresa un email v√°lido';
      if (field.errors['minlength']) return `M√≠nimo ${field.errors['minlength'].requiredLength} caracteres`;
      if (field.errors['pattern']) {
        if (fieldName === 'pdf_url') return 'Debe ser una URL v√°lida (http:// o https://)';
        return 'Formato inv√°lido';
      }
    }
    return '';
  }

  // Preview del PDF
  previewPdf(): void {
    const pdfUrl = this.documentForm.get('pdf_url')?.value;
    if (pdfUrl) {
      window.open(pdfUrl, '_blank');
    }
  }

  // Autocompletar ejemplos
  fillExample(): void {
    this.documentForm.patchValue({
      name: 'Contrato de Servicios Profesionales 2024',
      pdf_url: 'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf',
      created_by: 'Juan Carlos Administrador'
    });

    // Agregar un segundo firmante de ejemplo
    if (this.signersArray.length === 1) {
      this.addSigner();
    }

    this.signersArray.at(0).patchValue({
      name: 'Mar√≠a Garc√≠a L√≥pez',
      email: 'maria.garcia@empresa.com'
    });

    this.signersArray.at(1).patchValue({
      name: 'Carlos Rodr√≠guez P√©rez',
      email: 'carlos.rodriguez@cliente.com'
    });

    this.snackBar.open('Ejemplo cargado', 'Cerrar', { duration: 3000 });
  }



  // Gesti√≥n r√°pida de empresas
  openCompanyManager(): void {
    const dialogRef = this.dialog.open(CompanyQuickManagerComponent, {
      width: '600px',
      maxHeight: '85vh',
      data: {}
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result && result.action === 'select') {
        // PRIMERO: Recargar la lista de empresas
        this.loadCompanies().then(() => {
          // DESPU√âS: Seleccionar la empresa en el dropdown
          setTimeout(() => {
            this.documentForm.patchValue({
              company_id: result.company.id
            });
            this.snackBar.open(`Empresa "${result.company.name}" seleccionada`, 'Cerrar', { duration: 3000 });
            console.log('‚úÖ Empresa seleccionada:', result.company.name, 'ID:', result.company.id);
          }, 100);
        }).catch(() => {
          // Si hay error cargando empresas, a√∫n as√≠ intentar seleccionar
          this.documentForm.patchValue({
            company_id: result.company.id
          });
          this.snackBar.open(`Empresa "${result.company.name}" seleccionada`, 'Cerrar', { duration: 3000 });
        });
      } else if (result && result.action === 'admin_companies') {
        // Navegar a administraci√≥n de empresas
        this.router.navigate(['/admin/companies']);
      } else {
        // Si no hay acci√≥n espec√≠fica, solo recargar empresas
        this.loadCompanies().catch(error => console.error('Error loading companies:', error));
      }
    });
  }

  /**
   * Muestra un error simple y amigable para errores conocidos
   */
  private showSimpleError(title: string, message: string): void {
    console.error(`üéØ Error conocido manejado: ${title} - ${message}`);

    this.snackBar.open(`${title}\n\n${message}`, 'Entendido', {
      duration: 15000,
      panelClass: ['error-snackbar'],
      horizontalPosition: 'center',
      verticalPosition: 'top'
    });
  }

  /**
   * Marca un campo espec√≠fico como inv√°lido con un mensaje personalizado
   */
  private markFieldAsInvalid(fieldName: string, errorMessage: string): void {
    const control = this.documentForm.get(fieldName);
    if (control) {
      control.setErrors({ customError: errorMessage });
      control.markAsTouched();
    }
  }

  /**
   * Marca el campo de empresa como inv√°lido
   */
  private markCompanyFieldAsInvalid(errorMessage: string): void {
    const control = this.documentForm.get('company_id');
    if (control) {
      control.setErrors({ customError: errorMessage });
      control.markAsTouched();
    }
  }
}
