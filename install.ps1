# =============================================================================
# üöÄ ZapSign Document Management System - Instalaci√≥n Autom√°tica
# =============================================================================
# Script de instalaci√≥n para Windows (PowerShell)
# Ejecutar como: .\install.ps1
# =============================================================================

# -----------------------------------------------------------
# Elevaci√≥n a Administrador si es necesario
# -----------------------------------------------------------
$scriptPath = $MyInvocation.MyCommand.Definition
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent() `
     ).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)) {
    Write-Host "üîê Elevando permisos de administrador..." -ForegroundColor Yellow
    Start-Process -FilePath PowerShell `
                  -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$scriptPath`"" `
                  -Verb RunAs
    exit
}

Write-Host "=============================================" -ForegroundColor Cyan
Write-Host "üöÄ ZapSign CRUD - Instalaci√≥n Autom√°tica" -ForegroundColor Cyan
Write-Host "=============================================" -ForegroundColor Cyan
Write-Host ""

# -----------------------------------------------------------
# Verificar Docker Desktop
# -----------------------------------------------------------
Write-Host "üîç Verificando Docker..." -ForegroundColor Yellow

try {
    # Intentar iniciar Docker Desktop si no est√° corriendo
    $dockerProcess = Get-Process "Docker Desktop" -ErrorAction SilentlyContinue
    if (-not $dockerProcess) {
        Write-Host "üì± Intentando iniciar Docker Desktop..." -ForegroundColor Yellow

        # Buscar Docker Desktop en ubicaciones comunes
        $dockerPaths = @(
            "$env:ProgramFiles\Docker\Docker\Docker Desktop.exe",
            "$env:LOCALAPPDATA\Programs\Docker\Docker\Docker Desktop.exe"
        )

        $dockerFound = $false
        foreach ($path in $dockerPaths) {
            if (Test-Path $path) {
                Start-Process $path
                $dockerFound = $true
                Write-Host "‚úÖ Docker Desktop iniciado" -ForegroundColor Green
                Write-Host "‚è≥ Esperando que Docker est√© listo (30 segundos)..." -ForegroundColor Yellow
                Start-Sleep -Seconds 30
                break
            }
        }

        if (-not $dockerFound) {
            Write-Host "‚ö†Ô∏è  Docker Desktop no encontrado autom√°ticamente" -ForegroundColor Red
            Write-Host "üìã Por favor:" -ForegroundColor Yellow
            Write-Host "   1. Abra Docker Desktop manualmente" -ForegroundColor White
            Write-Host "   2. Espere a que est√© completamente iniciado" -ForegroundColor White
            Write-Host "   3. Presione cualquier tecla para continuar..." -ForegroundColor White
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
    } else {
        Write-Host "‚úÖ Docker Desktop ya est√° ejecut√°ndose" -ForegroundColor Green
    }

    # Verificar que Docker CLI funcione
    $dockerVersion = docker --version 2>$null
    if ($LASTEXITCODE -ne 0) {
        throw "Docker CLI no disponible"
    }

    # Verificar que Docker Compose funcione
    $composeVersion = docker compose version 2>$null
    if ($LASTEXITCODE -ne 0) {
        throw "Docker Compose no disponible"
    }

    # Verificar que Docker daemon est√© corriendo
    docker info 2>$null | Out-Null
    if ($LASTEXITCODE -ne 0) {
        throw "Docker daemon no est√° corriendo"
    }

    Write-Host "‚úÖ Docker est√° listo!" -ForegroundColor Green

} catch {
    Write-Host "‚ùå Error con Docker: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host ""
    Write-Host "üìã Soluciones:" -ForegroundColor Yellow
    Write-Host "   1. Instale Docker Desktop desde: https://docker.com/get-started" -ForegroundColor White
    Write-Host "   2. Aseg√∫rese de que Docker Desktop est√© ejecut√°ndose" -ForegroundColor White
    Write-Host "   3. Reinicie este script despu√©s de que Docker est√© listo" -ForegroundColor White
    Write-Host ""
    Read-Host "Presione Enter para salir"
    exit 1
}

# -----------------------------------------------------------
# Instalaci√≥n del Sistema
# -----------------------------------------------------------
Write-Host ""
Write-Host "üìã Este script ejecutar√°:" -ForegroundColor Cyan
Write-Host "   1. Limpiar contenedores y vol√∫menes previos" -ForegroundColor White
Write-Host "   2. Construir im√°genes Docker optimizadas" -ForegroundColor White
Write-Host "   3. Iniciar servicios (PostgreSQL, Django, Angular)" -ForegroundColor White
Write-Host "   4. Ejecutar migraciones de base de datos" -ForegroundColor White
Write-Host "   5. Cargar datos iniciales con token ZapSign" -ForegroundColor White
Write-Host "   6. Verificar que todo funcione correctamente" -ForegroundColor White
Write-Host ""
Write-Host "‚è±Ô∏è  Tiempo estimado: 3-5 minutos en primera ejecuci√≥n" -ForegroundColor Yellow
Write-Host ""

$confirmation = Read-Host "¬øContinuar con la instalaci√≥n? (S/n)"
if ($confirmation -eq 'n' -or $confirmation -eq 'N') {
    Write-Host "‚ùå Instalaci√≥n cancelada por el usuario" -ForegroundColor Red
    exit 0
}

try {
    Write-Host ""
    Write-Host "üßπ Paso 1: Limpiando entorno previo..." -ForegroundColor Yellow
    docker compose down -v --remove-orphans 2>$null
    Write-Host "‚úÖ Entorno limpio" -ForegroundColor Green

    Write-Host ""
    Write-Host "üèóÔ∏è  Paso 2: Construyendo im√°genes Docker..." -ForegroundColor Yellow
    docker compose build --no-cache
    if ($LASTEXITCODE -ne 0) { throw "Error construyendo im√°genes" }
    Write-Host "‚úÖ Im√°genes construidas exitosamente" -ForegroundColor Green

    Write-Host ""
    Write-Host "üöÄ Paso 3: Iniciando servicios..." -ForegroundColor Yellow
    docker compose up -d
    if ($LASTEXITCODE -ne 0) { throw "Error iniciando servicios" }
    Write-Host "‚úÖ Servicios iniciados" -ForegroundColor Green

    Write-Host ""
    Write-Host "‚è≥ Paso 4: Esperando servicios (30 segundos)..." -ForegroundColor Yellow
    Start-Sleep -Seconds 30

    Write-Host ""
    Write-Host "üóÑÔ∏è  Paso 5: Ejecutando migraciones..." -ForegroundColor Yellow
    docker compose exec -T backend python manage.py migrate
    if ($LASTEXITCODE -ne 0) { throw "Error en migraciones" }
    Write-Host "‚úÖ Migraciones ejecutadas" -ForegroundColor Green

    Write-Host ""
    Write-Host "üå± Paso 6: Cargando datos iniciales..." -ForegroundColor Yellow
    docker compose exec -T backend python init_data.py
    if ($LASTEXITCODE -ne 0) { throw "Error cargando datos" }
    Write-Host "‚úÖ Datos iniciales cargados" -ForegroundColor Green

    Write-Host ""
    Write-Host "üîç Paso 7: Verificando servicios..." -ForegroundColor Yellow
    $services = docker compose ps --format "table {{.Name}}\t{{.Status}}" | Select-Object -Skip 1
    Write-Host $services

    # Verificar que la API responda
    Start-Sleep -Seconds 5
    try {
        $apiTest = Invoke-RestMethod -Uri "http://localhost:8000/api/companies/" -TimeoutSec 10
        Write-Host "‚úÖ API backend funcionando correctamente" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è  Advertencia: API backend podr√≠a necesitar m√°s tiempo para iniciar" -ForegroundColor Yellow
    }

} catch {
    Write-Host ""
    Write-Host "‚ùå Error durante la instalaci√≥n: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host ""
    Write-Host "üîß Comandos para debug:" -ForegroundColor Yellow
    Write-Host "   docker compose logs backend" -ForegroundColor White
    Write-Host "   docker compose logs frontend" -ForegroundColor White
    Write-Host "   docker compose logs db" -ForegroundColor White
    Write-Host ""
    Read-Host "Presione Enter para salir"
    exit 1
}

# -----------------------------------------------------------
# Instalaci√≥n Completada
# -----------------------------------------------------------
Write-Host ""
Write-Host "=============================================" -ForegroundColor Green
Write-Host "üéâ ¬°INSTALACI√ìN COMPLETADA EXITOSAMENTE!" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Green
Write-Host ""
Write-Host "üåê Acceso a la aplicaci√≥n:" -ForegroundColor Cyan
Write-Host "   üì± Frontend:    http://localhost:4200" -ForegroundColor White
Write-Host "   ‚ö° Backend API: http://localhost:8000/api/" -ForegroundColor White
Write-Host "   üìö API Docs:    http://localhost:8000/api/docs/" -ForegroundColor White
Write-Host "   üóÑÔ∏è  Database:   localhost:5432 (zuser/zpass/zapsign)" -ForegroundColor White
Write-Host ""
Write-Host "üîß Comandos √∫tiles:" -ForegroundColor Cyan
Write-Host "   docker compose logs -f backend    # Ver logs backend" -ForegroundColor White
Write-Host "   docker compose logs -f frontend   # Ver logs frontend" -ForegroundColor White
Write-Host "   docker compose down               # Detener servicios" -ForegroundColor White
Write-Host "   docker compose up -d              # Reiniciar servicios" -ForegroundColor White
Write-Host ""
Write-Host "üöÄ ¬°El sistema ZapSign est√° listo para usar!" -ForegroundColor Green
Write-Host ""

Read-Host "Presione Enter para abrir el frontend en el navegador"

# Abrir frontend en navegador por defecto
Start-Process "http://localhost:4200"

Write-Host "‚úÖ ¬°Disfrute del sistema ZapSign!" -ForegroundColor Green
